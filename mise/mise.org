#+TITLE: Mise Configuration
#+AUTHOR: Samuele Paglia
#+DESCRIPTION: Global mise configuration for dotfiles management
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:toml :tangle config.toml

* Table of contents :toc:
- [[#introduction][Introduction]]
- [[#configuration-structure][Configuration Structure]]
- [[#global-settings][Global Settings]]
- [[#environment-variables][Environment Variables]]
- [[#core-tools][Core Tools]]
- [[#modern-shell-utilities][Modern Shell Utilities]]
- [[#editors][Editors]]
- [[#tool-specific-configurations][Tool-Specific Configurations]]
- [[#global-tasks][Global Tasks]]

* Introduction

This is the main mise configuration file for the dotfiles repository. It uses a literate programming approach with Emacs Org Mode.

Mise (https://mise.jdx.dev/) is a polyglot runtime manager that can manage:
- Development tool versions (like asdf)
- Environment variables
- Task automation

This configuration file tangles to =config.toml= which, when stowed to =~/.config/mise/config.toml=, becomes the global mise configuration.

* Configuration Structure

This mise configuration uses literate programming with Emacs Org Mode:

- =mise.org= (this file) → =config.toml= - Main configuration with global tasks and environment variables

All code blocks in this file tangle to =config.toml=. The mise directory is stowed to =~/.config/mise=, making tasks available globally from any directory.

* Global Settings

Configure mise global settings:

- =auto_install=: Automatically install missing tools when entering directory
- =verbose=: Use verbose output for better debugging
- =experimental=: Enable experimental features

#+begin_src toml
[settings]
auto_install = true
verbose = false
experimental = true
#+end_src

* Environment Variables

Set up environment variables used across the system:

- =DOTFILES_ROOT=: Dotfiles repository root. Can be overridden by setting in your shell before running mise tasks.
- =MISE_CONFIG_DIR=: Mise config directory (symlinked from =dotfiles/mise=)
- XDG Base Directory Specification variables

#+begin_src toml
[env]
DOTFILES_ROOT = "{{env.DOTFILES_ROOT | default(value=env.HOME ~ '/Documents/claude/dotfiles')}}"
MISE_CONFIG_DIR = "{{config_root}}"
XDG_CONFIG_HOME = "~/.config"
XDG_DATA_HOME = "~/.local/share"
XDG_CACHE_HOME = "~/.cache"
#+end_src

* Tool Installation

Tools are installed via Homebrew using mise tasks. This allows mise to orchestrate the installation without managing the tools directly.

** Core Tools

Core system tools that are fundamental for the dotfiles setup:
- stow - Dotfiles symlink manager
- git, git-lfs - Version control
- mise - Runtime manager (self-update)

** Modern Shell Utilities

Modern replacements for traditional Unix utilities:
- eza - Modern replacement for 'ls'
- bat - Modern replacement for 'cat' with syntax highlighting
- fzf - Fuzzy finder
- zoxide - Smarter 'cd' command
- ripgrep, fd - Fast grep/find alternatives
- zsh-autosuggestions, zsh-syntax-highlighting - Zsh enhancements
- atuin - Shell history management
- starship - Cross-shell prompt

** GUI Applications

Terminal emulators and window managers:
- wezterm - GPU-accelerated terminal emulator (cask)
- aerospace - i3-like tiling window manager (tap)

** Editors

Text editors for development:
- neovim - Modern Vim-based editor
- emacs - Extensible text editor

#+begin_src toml
[tasks.install-brew-tools]
description = "Install CLI tools via Homebrew"
run = '''
brew install \
  stow git git-lfs mise \
  eza bat fzf zoxide ripgrep fd \
  zsh-autosuggestions zsh-syntax-highlighting atuin \
  starship neovim emacs && \
echo '✓ Homebrew CLI tools installed'
'''

[tasks.install-brew-casks]
description = "Install GUI applications via Homebrew casks"
run = '''
brew install --cask wezterm && \
brew install nikitabobko/tap/aerospace && \
echo '✓ Homebrew casks installed'
'''
#+end_src

* Global Tasks

Define global tasks for managing the dotfiles.

** GNU Stow Usage

Stow is used to symlink configuration files from the dotfiles directory to =~/.config=.

The =.stowrc= file in the repository root configures:
- Target directory: =~/.config=
- Ignore patterns: =.md=, =.org=, =.stowrc=, =DS_Store=, backup files (=.*~=)
- Use =--adopt= flag to overwrite stow directory files with existing target files

Common stow operations:

- *Deploy all*: =stow .= (uses .stowrc settings)
- *Dry run*: =stow --adopt -t ~/.config -nv .= (simulate, verbose)
- *Deploy specific*: =stow -v -t ~/.config tmux nvim=
- *Remove (unstow)*: =stow -Dt ~/.config bash=
- *Re-stow*: =stow -Rt ~/.config .= (unlink and relink)

Flags:
- =-n= / =--simulate=: Dry run, show what would be done
- =-v= / =--verbose=: Show operations (use =-vv= for more detail)
- =-t DIR=: Target directory
- =-D=: Delete (unstow)
- =-R=: Restow (delete then stow)
- =--adopt=: Adopt existing files from target into stow directory

** Task Definitions

#+begin_src toml

[tasks.bootstrap]
description = "Complete setup: install tools, tangle configs, and stow dotfiles"
depends = ["install-brew-tools", "install-brew-casks", "tangle", "setup", "setup-tmux"]
run = "echo '✓ Bootstrap complete! Dotfiles are ready.'"

[tasks.install]
description = "Install all tools (Homebrew CLI tools and casks)"
depends = ["install-brew-tools", "install-brew-casks"]
run = [
    "mkdir -p $HOME/.config",
    "echo '✓ All tools installed'",
]

[tasks.tangle]
description = "Tangle all Org mode configuration files"
dir = "{{env.DOTFILES_ROOT}}"
run = '''
emacs --batch --eval "(progn \
  (require 'org) \
  (dolist (file '(\"{{env.DOTFILES_ROOT}}/tmux/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/wezterm/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/aerospace/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/starship/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/git/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/nvim/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/emacs/config.org\" \
                  \"{{env.DOTFILES_ROOT}}/mise/mise.org\")) \
    (when (file-exists-p file) \
      (message \"Tangling %s...\" file) \
      (with-current-buffer (find-file-noselect file) \
        (org-babel-tangle) \
        (kill-buffer)))))"
'''
outputs = ["echo '✓ All configurations tangled'"]

[tasks.setup]
description = "Set up dotfiles using stow (creates symlinks in ~/.config)"
depends = ["tangle"]
dir = "{{env.DOTFILES_ROOT}}"
run = [
    "stow --adopt -t ~/.config -v .",
    "echo '✓ Dotfiles symlinked to ~/.config'",
]

[tasks.update]
description = "Update all tools to latest versions"
run = [
    "mise upgrade",
    "brew upgrade",
    "echo '✓ All tools updated'",
]

[tasks.verify]
description = "Verify stow configuration (dry run)"
dir = "{{env.DOTFILES_ROOT}}"
run = "stow --adopt -t ~/.config -nv ."

[tasks.restow]
description = "Re-stow all configurations"
dir = "{{env.DOTFILES_ROOT}}"
run = [
    "stow -Rt ~/.config .",
    "echo '✓ Configurations re-stowed'",
]

[tasks.clean]
description = "Remove all symlinks created by stow"
dir = "{{env.DOTFILES_ROOT}}"
run = [
    "stow -Dt ~/.config .",
    "echo '✓ Symlinks removed'",
]

[tasks.doctor]
description = "Check mise and tool installation status"
run = [
    "mise doctor",
    "mise list",
]

[tasks.setup-tmux]
description = "Install TMUX Plugin Manager (TPM)"
run = [
    "git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm || echo 'TPM already installed'",
    "echo '✓ TPM installed. Press prefix + I in tmux to install plugins'",
]

[tasks.reload-tmux]
description = "Reload TMUX configuration"
run = "tmux source-file ~/.config/tmux/tmux.conf || echo 'Start tmux first, then reload with prefix + R'"

[tasks.reload-aerospace]
description = "Reload AeroSpace configuration"
run = [
    "aerospace reload-config",
    "echo '✓ AeroSpace configuration reloaded'",
]
#+end_src

** Usage

All mise tasks can be run from any directory.

*** Quick Start

#+begin_src shell
# Complete bootstrap (install brew tools → tangle configs → stow → setup tmux)
mise run bootstrap
#+end_src

*** Installation Tasks

#+begin_src shell
# Install all tools via Homebrew
mise run install

# Or install individually:
mise run install-brew-tools    # CLI tools (stow, git, neovim, emacs, etc.)
mise run install-brew-casks     # GUI apps (wezterm, aerospace)
#+end_src

*** Configuration Tasks

#+begin_src shell
# Tangle all Org files to generate configs
mise run tangle

# Stow dotfiles to ~/.config
mise run setup

# Setup TMUX plugin manager
mise run setup-tmux
#+end_src

*** Maintenance Tasks

#+begin_src shell
# Update all tools (mise + brew)
mise run update

# Reload configurations
mise run reload-tmux         # Reload tmux config
mise run reload-aerospace    # Reload aerospace config

# Stow operations
mise run verify              # Verify stow (dry run)
mise run restow              # Re-stow all configs
mise run clean               # Remove all symlinks

# System check
mise run doctor              # Check mise status
#+end_src

*** Environment Variables

Tasks use =DOTFILES_ROOT= (defaults to =~/Documents/claude/dotfiles=).

Override: =export DOTFILES_ROOT=/path/to/your/dotfiles=
