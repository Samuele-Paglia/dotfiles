# Mise configuration for dotfiles repository

[settings]
verbose = false
experimental = true
lockfile = true

[tools]
shellcheck = "latest"  # Shell script linter (mise-managed)

[env]
DOTFILES_ROOT = "{{env.DOTFILES_ROOT | default(value=env.HOME ~ '/Documents/repos/dotfiles')}}"
XDG_CONFIG_HOME = "{{env.XDG_CONFIG_HOME | default(value=env.HOME ~ '/.config')}}"
BREW_CLI_TOOLS = "stow git git-lfs eza bat fzf zoxide ripgrep fd zsh-autosuggestions zsh-syntax-highlighting atuin starship neovim emacs tmux macchina taplo luacheck"
BREW_CASKS = "wezterm nikitabobko/tap/aerospace font-jetbrains-mono-nerd-font"

# ==============================================================================
# HOOKS
# ==============================================================================

# Auto-tangle org files when they change
[[watch_files]]
patterns = ["**/*.org"]
run = "mise run tangle-single $MISE_WATCH_FILES_MODIFIED"

# ==============================================================================
# ORCHESTRATION TASKS
# ==============================================================================

[tasks.bootstrap]
description = "Complete setup: install tools, tangle configs, and stow dotfiles"
depends = ["install", "tangle", "stow"]
depends_post = ["setup-tmux", "setup-zsh"]
run = "echo '✓ Bootstrap complete! Dotfiles are ready.'"

[tasks.doctor]
description = "Check mise and tool installation status"
run = [
    "mise doctor",
    "mise list",
]

[tasks.reload-shell]
description = "Reload shell configuration"
run = '''
echo "Reloading shell configuration..."
exec "$SHELL" -l
'''

# ==============================================================================
# DEPENDENCY INSTALLATION TASKS
# ==============================================================================

[tasks.install]
description = "Install all tools (Homebrew CLI tools and casks)"
depends = ["install-brew-tools", "install-brew-casks"]
run = [
    "mkdir -p {{env.XDG_CONFIG_HOME}}",
    "echo '✓ All tools installed'",
]

[tasks.install-brew-tools]
description = "Install CLI tools via Homebrew"
run = '''
brew install {{env.BREW_CLI_TOOLS}} && \
echo '✓ Homebrew CLI tools installed'
'''

[tasks.install-brew-casks]
description = "Install GUI applications via Homebrew casks"
run = '''
brew install --cask {{env.BREW_CASKS}} && \
echo '✓ Homebrew casks installed'
'''

# ==============================================================================
# LITERATE PROGRAMMING TASKS
# ==============================================================================

[tasks.tangle]
description = "Tangle all Org mode configuration files"
run = '''
emacs --batch --eval "(progn \
  (require 'org) \
  (dolist (file '(\"{{env.DOTFILES_ROOT}}/tmux/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/wezterm/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/aerospace/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/starship/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/git/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/nvim/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/emacs/config.org\" \
                  \"{{env.DOTFILES_ROOT}}/zsh/README.org\")) \
    (when (file-exists-p file) \
      (message \"Tangling %s...\" file) \
      (with-current-buffer (find-file-noselect file) \
        (org-babel-tangle) \
        (kill-buffer)))))"
'''
outputs = ["echo '✓ All configurations tangled'"]

[tasks.tangle-single]
description = "Tangle a single Org mode file"
run = '''
ORG_FILE="{{arg(name="file")}}"
if [[ -z "$ORG_FILE" ]]; then
    echo "Usage: mise run tangle-single <org-file-path>"
    exit 1
fi

if [[ ! -f "$ORG_FILE" ]]; then
    echo "Error: File '$ORG_FILE' not found"
    exit 1
fi

echo "Tangling $ORG_FILE..."
emacs --batch "$ORG_FILE" --eval '(org-babel-tangle)' 2>/dev/null && \
echo "✓ Tangled $(basename $ORG_FILE)"
'''

[tasks.watch]
description = "Watch org files and auto-tangle on changes"
run = '''
echo "👀 Watching for changes in .org files..."
echo "Press Ctrl+C to stop"
fswatch -o **/*.org | while read -r event; do
    echo "→ Change detected, tangling..."
    mise run tangle && echo "✓ Tangle complete"
done
'''

[tasks.tangle-changed]
description = "Tangle only modified org files"
run = '''
CHANGED_ORG_FILES=$(git diff --name-only HEAD | grep '.org$' || true)

if [ -z "$CHANGED_ORG_FILES" ]; then
    echo "No modified org files to tangle"
    exit 0
fi

echo "Tangling modified org files:"
for file in $CHANGED_ORG_FILES; do
    if [ -f "$file" ]; then
        echo "  → $file"
        emacs --batch "$file" --eval '(org-babel-tangle)' 2>/dev/null
    fi
done

echo "✓ Modified org files tangled"
'''

[tasks.clean-tangled]
description = "Remove all tangled configuration files"
run = '''
echo "⚠️  This will remove all tangled configuration files"
read -p "Continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Clean cancelled"
    exit 1
fi

echo "Cleaning tangled files..."
rm -f tmux/.config/tmux/tmux.conf tmux/.config/tmux/tmux-*.conf
rm -f wezterm/.config/wezterm/wezterm.lua
rm -f aerospace/.config/aerospace/aerospace.toml
rm -f starship/.config/starship.toml
rm -f git/.config/git/.gitconfig
rm -f nvim/.config/nvim/init.lua nvim/.config/nvim/lua/*.lua
rm -f emacs/.config/emacs/early-init.el emacs/.config/emacs/config.el
rm -f zsh/.config/zsh/.zshenv zsh/.config/zsh/.zprofile zsh/.config/zsh/.zshrc zsh/.config/zsh/aliases

echo "✓ Tangled files removed"
echo "Run 'mise run tangle' to regenerate configurations"
'''

# ==============================================================================
# DEPLOYMENT TASKS (STOW)
# ==============================================================================

[tasks.stow]
description = "Set up dotfiles using stow (creates symlinks in XDG config directory)"
depends = ["tangle"]
run = [
    "stow .",
    "echo '✓ Dotfiles symlinked to {{env.XDG_CONFIG_HOME}}'",
]

[tasks.stow-verify]
description = "Verify stow configuration (dry run)"
run = "stow -nv ."

[tasks.restow]
description = "Re-stow all configurations"
run = [
    "stow -R .",
    "echo '✓ Configurations re-stowed'",
]

[tasks.destow]
description = "Remove all symlinks created by stow (with confirmation)"
run = '''
echo "⚠️  This will remove all symlinks in {{env.XDG_CONFIG_HOME}}"
echo "The following configurations will be unstowed:"
stow -D -nv . 2>&1 | grep "UNLINK:" || echo "  (no symlinks to remove)"
echo ""
read -p "Continue with destow? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    stow -D . && echo "✓ Symlinks removed"
else
    echo "Destow cancelled"
    exit 1
fi
'''

[tasks.stow-tool]
description = "Stow a specific tool's configuration"
run = '''
TOOL="{{arg(name="tool")}}"
if [[ -z "$TOOL" ]]; then
    echo "Usage: mise run stow-tool <tool-name>"
    echo "Available tools: nvim, tmux, wezterm, aerospace, starship, emacs, git, zsh"
    exit 1
fi

if [[ ! -d "$TOOL" ]]; then
    echo "Error: Tool directory '$TOOL' not found"
    echo "Available tools: nvim, tmux, wezterm, aerospace, starship, emacs, git, zsh"
    exit 1
fi

stow "$TOOL" && echo "✓ $TOOL configuration stowed to {{env.XDG_CONFIG_HOME}}"
'''

[tasks.restow-tool]
description = "Restow a specific tool's configuration"
run = '''
TOOL="{{arg(name="tool")}}"
if [[ -z "$TOOL" ]]; then
    echo "Usage: mise run restow-tool <tool-name>"
    echo "Available tools: nvim, tmux, wezterm, aerospace, starship, emacs, git, zsh"
    exit 1
fi

if [[ ! -d "$TOOL" ]]; then
    echo "Error: Tool directory '$TOOL' not found"
    exit 1
fi

stow -R "$TOOL" && echo "✓ $TOOL configuration restowed"
'''

[tasks.destow-tool]
description = "Remove symlinks for a specific tool"
run = '''
TOOL="{{arg(name="tool")}}"
if [[ -z "$TOOL" ]]; then
    echo "Usage: mise run destow-tool <tool-name>"
    echo "Available tools: nvim, tmux, wezterm, aerospace, starship, emacs, git, zsh"
    exit 1
fi

if [[ ! -d "$TOOL" ]]; then
    echo "Error: Tool directory '$TOOL' not found"
    exit 1
fi

stow -D "$TOOL" && echo "✓ $TOOL symlinks removed"
'''

# ==============================================================================
# VALIDATION TASKS
# ==============================================================================

[tasks.validate]
description = "Validate all configuration files"
run = '''
echo "Validating configurations..."
FAILED=0

# Validate TOML files
echo "→ Checking TOML files..."
[[ -f aerospace/aerospace.toml ]] && taplo check aerospace/aerospace.toml 2>/dev/null || { echo "  ✗ aerospace.toml invalid or missing"; FAILED=1; }
[[ -f starship/starship.toml ]] && taplo check starship/starship.toml 2>/dev/null || { echo "  ✗ starship.toml invalid or missing"; FAILED=1; }
[[ $FAILED -eq 0 ]] && echo "  ✓ TOML files valid"

# Validate Lua files
echo "→ Checking Lua files..."
[[ -f wezterm/wezterm.lua ]] && luacheck wezterm/wezterm.lua 2>/dev/null || { echo "  ✗ wezterm.lua invalid or missing"; FAILED=1; }
[[ -d nvim ]] && luacheck nvim/ --quiet 2>/dev/null || { echo "  ✗ nvim config invalid or missing"; FAILED=1; }
[[ $FAILED -eq 0 ]] && echo "  ✓ Lua files valid"

# Validate shell configs
echo "→ Checking shell scripts..."
[[ -f zsh/.zshrc ]] && shellcheck -x zsh/.zshrc 2>/dev/null || { echo "  ✗ .zshrc has issues or missing"; FAILED=1; }
[[ $FAILED -eq 0 ]] && echo "  ✓ Shell scripts valid"

# Validate tmux config
echo "→ Checking tmux config..."
[[ -f tmux/tmux.conf ]] && tmux source-file tmux/tmux.conf 2>/dev/null || { echo "  ✗ tmux.conf invalid or missing"; FAILED=1; }
[[ $FAILED -eq 0 ]] && echo "  ✓ tmux config valid"

# Validate nvim config (headless check)
echo "→ Checking neovim config..."
nvim --headless -c 'qa' 2>/dev/null || { echo "  ✗ nvim config invalid"; FAILED=1; }
[[ $FAILED -eq 0 ]] && echo "  ✓ nvim config valid"

# Validate emacs config
echo "→ Checking emacs config..."
emacs --batch --eval "(kill-emacs)" 2>/dev/null || { echo "  ✗ emacs config invalid"; FAILED=1; }
[[ $FAILED -eq 0 ]] && echo "  ✓ emacs config valid"

if [[ $FAILED -eq 0 ]]; then
    echo "✓ All validations passed"
    exit 0
else
    echo "✗ Some validations failed"
    exit 1
fi
'''

[tasks.validate-tool]
description = "Validate a specific tool's configuration"
run = '''
TOOL="{{arg(name="tool")}}"
if [[ -z "$TOOL" ]]; then
    echo "Usage: mise run validate-tool <tool-name>"
    echo "Available tools: tmux, nvim, emacs, aerospace, starship, wezterm, zsh"
    exit 1
fi

case "$TOOL" in
    tmux)
        echo "Validating tmux configuration..."
        tmux source-file tmux/tmux.conf 2>/dev/null && echo "✓ tmux config valid" || { echo "✗ tmux config invalid"; exit 1; }
        ;;
    nvim)
        echo "Validating neovim configuration..."
        luacheck nvim/ --quiet 2>/dev/null && echo "✓ nvim Lua valid" || { echo "✗ nvim Lua invalid"; exit 1; }
        nvim --headless -c 'qa' 2>/dev/null && echo "✓ nvim config valid" || { echo "✗ nvim config invalid"; exit 1; }
        ;;
    emacs)
        echo "Validating emacs configuration..."
        emacs --batch --eval "(kill-emacs)" 2>/dev/null && echo "✓ emacs config valid" || { echo "✗ emacs config invalid"; exit 1; }
        ;;
    aerospace)
        echo "Validating aerospace configuration..."
        taplo check aerospace/aerospace.toml 2>/dev/null && echo "✓ aerospace.toml valid" || { echo "✗ aerospace.toml invalid"; exit 1; }
        ;;
    starship)
        echo "Validating starship configuration..."
        taplo check starship/starship.toml 2>/dev/null && echo "✓ starship.toml valid" || { echo "✗ starship.toml invalid"; exit 1; }
        ;;
    wezterm)
        echo "Validating wezterm configuration..."
        luacheck wezterm/wezterm.lua 2>/dev/null && echo "✓ wezterm.lua valid" || { echo "✗ wezterm.lua invalid"; exit 1; }
        ;;
    zsh)
        echo "Validating zsh configuration..."
        [[ -f zsh/.zshrc ]] && shellcheck -x zsh/.zshrc 2>/dev/null && echo "✓ .zshrc valid" || { echo "✗ .zshrc has issues"; exit 1; }
        ;;
    *)
        echo "Unknown tool: $TOOL"
        echo "Available tools: tmux, nvim, emacs, aerospace, starship, wezterm, zsh"
        exit 1
        ;;
esac
'''

# ==============================================================================
# TOOL-SPECIFIC SETUP TASKS
# ==============================================================================

[tasks.setup-tmux]
description = "Install TMUX Plugin Manager (TPM)"
run = [
    "git clone https://github.com/tmux-plugins/tpm {{env.XDG_CONFIG_HOME}}/tmux/plugins/tpm || echo 'TPM already installed'",
    "echo '✓ TPM installed. Press prefix + I in tmux to install plugins'",
]

[tasks.reload-tmux]
description = "Reload TMUX configuration"
run = "tmux source-file {{env.XDG_CONFIG_HOME}}/tmux/tmux.conf || echo 'Start tmux first, then reload with prefix + R'"

[tasks.reload-aerospace]
description = "Reload AeroSpace configuration"
run = [
    "aerospace reload-config",
    "echo '✓ AeroSpace configuration reloaded'",
]

[tasks.setup-zsh]
description = "Set ZDOTDIR in ~/.zshenv and create .hushlogin to suppress login messages"
run = '''
echo 'export ZDOTDIR="{{env.XDG_CONFIG_HOME}}/zsh"' > ~/.zshenv && \
touch ~/.hushlogin && \
echo '✓ ZDOTDIR set in ~/.zshenv and .hushlogin created'
'''
