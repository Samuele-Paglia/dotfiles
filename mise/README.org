#+TITLE: Mise Configuration
#+AUTHOR: Samuele Paglia
#+DESCRIPTION: Mise task runner and tool management configuration for dotfiles
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#introduction][Introduction]]
- [[#installation][Installation]]
- [[#configuration][Configuration]]
  - [[#settings][Settings]]
  - [[#environment-variables][Environment Variables]]
  - [[#bootstrap-tasks][Bootstrap Tasks]]
  - [[#installation-tasks][Installation Tasks]]
  - [[#update-tasks][Update Tasks]]
  - [[#tangling-tasks][Tangling Tasks]]
  - [[#stow-management-tasks][Stow Management Tasks]]
  - [[#diagnostic-tasks][Diagnostic Tasks]]
  - [[#tool-specific-tasks][Tool-Specific Tasks]]

* Introduction

This configuration file manages the mise task runner and tool management for my dotfiles repository. Mise provides a unified interface for:
- Installing development tools and dependencies
- Running automated tasks (bootstrap, tangle, stow)
- Managing environment variables
- Orchestrating the dotfiles setup process

The configuration follows a literate programming approach where this Org file serves as both documentation and source. All TOML code blocks are tangled to =config.toml= using =C-c C-v t=.

Documentation: https://mise.jdx.dev

* Installation

MacOS installation using Homebrew:

#+begin_src shell
brew install mise
#+end_src

After installation, activate mise in your shell. For Zsh, add to =~/.zshrc=:

#+begin_src shell
# ~/.zshrc
eval "$(mise activate zsh)"
#+end_src

For Bash, add to =~/.bashrc=:

#+begin_src shell
# ~/.bashrc
eval "$(mise activate bash)"
#+end_src

* Configuration
:PROPERTIES:
:header-args:toml: :tangle config.toml
:END:

** Settings

Basic mise configuration with verbose output disabled and experimental features enabled.

#+begin_src toml
[settings]
verbose = false
experimental = true
#+end_src

** Environment Variables

Environment variables used throughout the mise tasks. These variables provide:
- =DOTFILES_ROOT=: Root directory of the dotfiles repository
- =MISE_CONFIG_DIR=: Mise configuration directory
- =BREW_CLI_TOOLS=: Space-separated list of Homebrew CLI tools to install
- =BREW_CASKS=: Space-separated list of Homebrew casks (GUI apps) to install

#+begin_src toml
[env]
DOTFILES_ROOT = "{{env.DOTFILES_ROOT | default(value=env.HOME ~ '/Documents/claude/dotfiles')}}"
MISE_CONFIG_DIR = "{{config_root}}"
BREW_CLI_TOOLS = "stow git git-lfs eza bat fzf zoxide ripgrep fd zsh-autosuggestions zsh-syntax-highlighting atuin starship neovim emacs"
BREW_CASKS = "wezterm nikitabobko/tap/aerospace"
#+end_src

*** Tool Lists Explanation

**** CLI Tools (=BREW_CLI_TOOLS=)
- =stow=: Symlink management for dotfiles
- =git=, =git-lfs=: Version control
- =eza=, =bat=: Modern replacements for ls and cat
- =fzf=: Fuzzy finder
- =zoxide=: Smart directory jumper
- =ripgrep=, =fd=: Fast search tools
- =zsh-autosuggestions=, =zsh-syntax-highlighting=: Zsh enhancements
- =atuin=: Shell history management
- =starship=: Cross-shell prompt
- =neovim=, =emacs=: Text editors

**** GUI Applications (=BREW_CASKS=)
- =wezterm=: GPU-accelerated terminal emulator
- =nikitabobko/tap/aerospace=: Tiling window manager for macOS

** Bootstrap Tasks

The =bootstrap= task is the main entry point that orchestrates the complete dotfiles setup.

#+begin_src toml
[tasks.bootstrap]
description = "Complete setup: install tools, tangle configs, and stow dotfiles"
depends = ["install", "tangle", "stow", "setup-tmux"]
run = "echo '✓ Bootstrap complete! Dotfiles are ready.'"
#+end_src

** Installation Tasks

*** Master Install Task

The =install= task coordinates installation of all tools.

#+begin_src toml
[tasks.install]
description = "Install all tools (Homebrew CLI tools and casks)"
depends = ["install-brew-tools", "install-brew-casks"]
run = [
    "mkdir -p $HOME/.config",
    "echo '✓ All tools installed'",
]
#+end_src

*** Homebrew CLI Tools

Installs command-line tools via Homebrew using the =BREW_CLI_TOOLS= environment variable.

#+begin_src toml
[tasks.install-brew-tools]
description = "Install CLI tools via Homebrew"
run = '''
brew install {{env.BREW_CLI_TOOLS}} && \
echo '✓ Homebrew CLI tools installed'
'''
#+end_src

*** Homebrew Casks

Installs GUI applications via Homebrew casks using the =BREW_CASKS= environment variable.

#+begin_src toml
[tasks.install-brew-casks]
description = "Install GUI applications via Homebrew casks"
run = '''
brew install --cask {{env.BREW_CASKS}} && \
echo '✓ Homebrew casks installed'
'''
#+end_src

** Update Tasks

Updates all installed tools to their latest versions.

#+begin_src toml
[tasks.update]
description = "Update all tools to latest versions"
run = [
    "mise upgrade",
    "brew upgrade",
    "echo '✓ All tools updated'",
]
#+end_src

** Tangling Tasks

The =tangle= task processes all Org mode files and generates their corresponding configuration files using Emacs batch mode.

#+begin_src toml
[tasks.tangle]
description = "Tangle all Org mode configuration files"
dir = "{{env.DOTFILES_ROOT}}"
run = '''
emacs --batch --eval "(progn \
  (require 'org) \
  (dolist (file '(\"{{env.DOTFILES_ROOT}}/tmux/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/wezterm/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/aerospace/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/starship/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/git/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/nvim/README.org\" \
                  \"{{env.DOTFILES_ROOT}}/emacs/config.org\" \
                  \"{{env.DOTFILES_ROOT}}/mise/README.org\")) \
    (when (file-exists-p file) \
      (message \"Tangling %s...\" file) \
      (with-current-buffer (find-file-noselect file) \
        (org-babel-tangle) \
        (kill-buffer)))))"
'''
outputs = ["echo '✓ All configurations tangled'"]
#+end_src

** Stow Management Tasks

*** Stow

Creates symlinks for all dotfiles to =~/.config= using GNU Stow. Depends on =tangle= to ensure configurations are generated first.

#+begin_src toml
[tasks.stow]
description = "Set up dotfiles using stow (creates symlinks in ~/.config)"
depends = ["tangle"]
dir = "{{env.DOTFILES_ROOT}}"
run = [
    "stow",
    "echo '✓ Dotfiles symlinked to ~/.config'",
]
#+end_src

*** Stow Verify

Performs a dry run to verify what stow will do without making actual changes.

#+begin_src toml
[tasks.stow-verify]
description = "Verify stow configuration (dry run)"
dir = "{{env.DOTFILES_ROOT}}"
run = "stow -nv ." # "stow --adopt -t ~/.config -nv ."
#+end_src

*** Re-stow

Removes and recreates all symlinks. Useful after modifying configurations.

#+begin_src toml
[tasks.restow]
description = "Re-stow all configurations"
dir = "{{env.DOTFILES_ROOT}}"
run = [
    "stow -R .", # "stow -Rt ~/.config .",
    "echo '✓ Configurations re-stowed'",
]
#+end_src

*** Destow

Removes all symlinks created by stow, effectively uninstalling the dotfiles.

#+begin_src toml
[tasks.destow]
description = "Remove all symlinks created by stow"
dir = "{{env.DOTFILES_ROOT}}"
run = [
    "stow -D .", # "stow -Dt ~/.config .",
    "echo '✓ Symlinks removed'",
]
#+end_src

** Diagnostic Tasks

Health check for mise and installed tools.

#+begin_src toml
[tasks.doctor]
description = "Check mise and tool installation status"
run = [
    "mise doctor",
    "mise list",
]
#+end_src

** Tool-Specific Tasks

*** TMUX Setup

Installs TMUX Plugin Manager (TPM) for managing tmux plugins.

#+begin_src toml
[tasks.setup-tmux]
description = "Install TMUX Plugin Manager (TPM)"
run = [
    "git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm || echo 'TPM already installed'",
    "echo '✓ TPM installed. Press prefix + I in tmux to install plugins'",
]
#+end_src

*** TMUX Reload

Reloads the tmux configuration file for the current session.

#+begin_src toml
[tasks.reload-tmux]
description = "Reload TMUX configuration"
run = "tmux source-file ~/.config/tmux/tmux.conf || echo 'Start tmux first, then reload with prefix + R'"
#+end_src

*** AeroSpace Reload

Reloads the AeroSpace window manager configuration.

#+begin_src toml
[tasks.reload-aerospace]
description = "Reload AeroSpace configuration"
run = [
    "aerospace reload-config",
    "echo '✓ AeroSpace configuration reloaded'",
]
#+end_src
