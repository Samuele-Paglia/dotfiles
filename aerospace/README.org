#+TITLE: AeroSpace Configuration
#+AUTHOR: Samuele Paglia
#+DESCRIPTION: My AeroSpace tiling window manager configuration for macOS
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#introduction][Introduction]]
- [[#configuration][Configuration]]
  - [[#configuration-file-location][Configuration File Location]]
  - [[#startup-behavior][Startup Behavior]]
  - [[#normalization-settings][Normalization Settings]]
  - [[#layout-configuration][Layout Configuration]]
  - [[#mouse-and-app-behavior][Mouse and App Behavior]]
  - [[#key-mapping-preset][Key Mapping Preset]]
  - [[#gaps-configuration][Gaps Configuration]]
  - [[#main-binding-mode][Main Binding Mode]]
  - [[#service-binding-mode][Service Binding Mode]]

* Introduction

My AeroSpace configuration is written using Emacs Org Mode following a literate programming approach. AeroSpace is an i3-like tiling window manager for macOS that provides powerful window management capabilities.

The configuration file uses TOML format and provides extensive customization for layouts, key bindings, and window behavior.

All the TOML code blocks in this document will be tangled to =aerospace.toml= using Org Mode's tangling feature (=C-c C-v t=).

Documentation: https://nikitabobko.github.io/AeroSpace/

* Configuration
:PROPERTIES:
:header-args:toml: :tangle aerospace.toml
:END:

** Configuration File Location

AeroSpace tries to find the custom config in two locations:
1. =~/.aerospace.toml=
2. =${XDG_CONFIG_HOME}/aerospace/aerospace.toml= (where XDG_CONFIG_HOME fallbacks to =~/.config= if the variable is not present)

#+begin_src toml
# AeroSpace tries to find the custom config in two locations:
# 1. ~/.aerospace.toml
# 2. ${XDG_CONFIG_HOME}/aerospace/aerospace.toml
# where the environment variable XDG_CONFIG_HOME fallbacks to ~/.config if the variable is not present
#+end_src

** Startup Behavior

Enable AeroSpace to start automatically at login:

#+begin_src toml

# Start AeroSpace at login
start-at-login = true
#+end_src

The =after-login-command= runs commands after login to macOS user session. Note that =start-at-login= needs to be =true= for this to work.

Available commands: https://nikitabobko.github.io/AeroSpace/commands

#+begin_src toml

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []
#+end_src

The =after-startup-command= runs after AeroSpace startup (after =after-login-command=):

#+begin_src toml

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = []
#+end_src

** Normalization Settings

Normalizations help maintain a clean and predictable window tree structure.

See: https://nikitabobko.github.io/AeroSpace/guide#normalization

#+begin_src toml

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true
#+end_src

** Layout Configuration

Configure the default layouts and accordion padding.

See: https://nikitabobko.github.io/AeroSpace/guide#layouts

The =accordion-padding= specifies the size of accordion padding. You can set it to 0 to disable the padding feature:

#+begin_src toml

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 30
#+end_src

Set the default root container layout. Possible values: =tiles= or =accordion=:

#+begin_src toml

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'
#+end_src

Set the default root container orientation. Possible values: =horizontal=, =vertical=, or =auto=.

With =auto=, wide monitors (wider than tall) get horizontal orientation, and tall monitors (taller than wide) get vertical orientation:

#+begin_src toml

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'
#+end_src

** Mouse and App Behavior

Make the mouse follow focus when the focused monitor changes.

See: https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
See: https://nikitabobko.github.io/AeroSpace/commands#move-mouse

#+begin_src toml

# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# Fallback value (if you omit the key): on-focused-monitor-changed = []
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']
#+end_src

Automatically unhide macOS hidden apps. This effectively turns off macOS "Hide application" (cmd-h) feature, which is useful if you accidentally hit cmd-h or cmd-alt-h.

See: https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app

#+begin_src toml

# You can effectively turn off macOS "Hide application" (cmd-h) feature by toggling this flag
# Useful if you don't use this macOS feature, but accidentally hit cmd-h or cmd-alt-h key
# Also see: https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app
automatically-unhide-macos-hidden-apps = true
#+end_src

** Key Mapping Preset

Set the keyboard layout preset. Possible values: =qwerty=, =dvorak=, or =colemak=.

See: https://nikitabobko.github.io/AeroSpace/guide#key-mapping

#+begin_src toml

# Possible values: (qwerty|dvorak|colemak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
    preset = 'qwerty'
#+end_src

** Gaps Configuration

Configure gaps between windows (=inner-*=) and between monitor edges (=outer-*=).

Possible values:
- Constant: =gaps.outer.top = 8=
- Per monitor: =gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]=
  (In this example, 24 is a default value when there is no match)

See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors

#+begin_src toml

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See:
#                 https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
    inner.horizontal = 10
    inner.vertical =   10
    outer.left =       10
    outer.bottom =     10
    outer.top =        10
    outer.right =      10
#+end_src

** Main Binding Mode

The =main= binding mode is the default mode and must always be present.

See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes

All possible keys:
- Letters: a, b, c, ..., z
- Numbers: 0, 1, 2, ..., 9
- Keypad numbers: keypad0, keypad1, keypad2, ..., keypad9
- F-keys: f1, f2, ..., f20
- Special keys: minus, equal, period, comma, slash, backslash, quote, semicolon, backtick, leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab, pageUp, pageDown, home, end, forwardDelete
- Keypad special: keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual, keypadMinus, keypadMultiply, keypadPlus
- Arrows: left, down, up, right

All possible modifiers: cmd, alt, ctrl, shift

All possible commands: https://nikitabobko.github.io/AeroSpace/commands

#+begin_src toml

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]

    # All possible keys:
    # - Letters.        a, b, c, ..., z
    # - Numbers.        0, 1, 2, ..., 9
    # - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
    # - F-keys.         f1, f2, ..., f20
    # - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon,
    #                   backtick, leftSquareBracket, rightSquareBracket, space, enter, esc,
    #                   backspace, tab, pageUp, pageDown, home, end, forwardDelete
    # - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
    #                   keypadMinus, keypadMultiply, keypadPlus
    # - Arrows.         left, down, up, right

    # All possible modifiers: cmd, alt, ctrl, shift

    # All possible commands: https://nikitabobko.github.io/AeroSpace/commands

    # See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
    # You can uncomment the following lines to open up terminal with alt + enter shortcut
    # (like in i3)
    # alt-enter = '''exec-and-forget osascript -e '
    # tell application "Terminal"
    #     do script
    #     activate
    # end tell'
    # '''
#+end_src

*** Layout Switching

Switch between different layout modes:

See: https://nikitabobko.github.io/AeroSpace/commands#layout

#+begin_src toml

    # Switch between layouts
    # See: https://nikitabobko.github.io/AeroSpace/commands#layout
    alt-t = 'layout tiles horizontal vertical'
    alt-comma = 'layout accordion horizontal vertical'
#+end_src

*** Window Focus

Navigate focus between windows using vim-like keys (h, j, k, l):

See: https://nikitabobko.github.io/AeroSpace/commands#focus

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#focus
    alt-h = 'focus left'
    alt-j = 'focus down'
    alt-k = 'focus up'
    alt-l = 'focus right'
#+end_src

*** Window Movement

Move windows between positions using alt-shift and vim-like keys:

See: https://nikitabobko.github.io/AeroSpace/commands#move

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#move
    alt-shift-h = 'move left'
    alt-shift-j = 'move down'
    alt-shift-k = 'move up'
    alt-shift-l = 'move right'
#+end_src

*** Window Resizing

Resize windows smartly using alt-ctrl-j/k:

See: https://nikitabobko.github.io/AeroSpace/commands#resize

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#resize
    alt-ctrl-j = 'resize smart -50'
    alt-ctrl-k = 'resize smart +50'
#+end_src

*** Workspace Switching

Switch to workspaces 1-9 using custom key mappings (a, s, d, f, g for workspaces 1-5, and numbers for 6-9):

See: https://nikitabobko.github.io/AeroSpace/commands#workspace

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#workspace
    alt-a = 'workspace 1'
    alt-s = 'workspace 2'
    alt-d = 'workspace 3'
    alt-f = 'workspace 4'
    alt-g = 'workspace 5'
    alt-6 = 'workspace 6'
    alt-7 = 'workspace 7'
    alt-8 = 'workspace 8'
    alt-9 = 'workspace 9'
#+end_src

*** Moving Windows to Workspaces

Move the current window to a specific workspace using alt-shift:

See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
    alt-shift-a = 'move-node-to-workspace 1'
    alt-shift-s = 'move-node-to-workspace 2'
    alt-shift-d = 'move-node-to-workspace 3'
    alt-shift-f = 'move-node-to-workspace 4'
    alt-shift-g = 'move-node-to-workspace 5'
    alt-shift-6 = 'move-node-to-workspace 6'
    alt-shift-7 = 'move-node-to-workspace 7'
    alt-shift-8 = 'move-node-to-workspace 8'
    alt-shift-9 = 'move-node-to-workspace 9'
#+end_src

*** Workspace and Monitor Management

Switch back and forth between workspaces, and move workspaces between monitors:

See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
    alt-tab = 'workspace-back-and-forth'
    # See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
    alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'
#+end_src

*** Mode Switching

Enter the service mode for advanced operations:

See: https://nikitabobko.github.io/AeroSpace/commands#mode

#+begin_src toml

    # See: https://nikitabobko.github.io/AeroSpace/commands#mode
    alt-shift-semicolon = 'mode service'
#+end_src

** Service Binding Mode

The =service= binding mode provides advanced operations like reloading config, resetting layouts, and joining windows.

See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes

#+begin_src toml

# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
[mode.service.binding]
    esc = ['reload-config', 'mode main']
    r = ['flatten-workspace-tree', 'mode main'] # reset layout
    f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
    backspace = ['close-all-windows-but-current', 'mode main']

    # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
    #s = ['layout sticky tiling', 'mode main']

    alt-shift-h = ['join-with left', 'mode main']
    alt-shift-j = ['join-with down', 'mode main']
    alt-shift-k = ['join-with up', 'mode main']
    alt-shift-l = ['join-with right', 'mode main']

    down = 'volume down'
    up = 'volume up'
    shift-down = ['volume set 0', 'mode main']
#+end_src
