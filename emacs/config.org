#+TITLE: My GNU Emacs Config
#+AUTHOR: Samuele Paglia
#+DESCRIPTION: My custom Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#programs-to-load-first][Programs to load first]]
  - [[#package-manager][Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#keybindings][Keybindings]]
- [[#theme][Theme]]
- [[#fonts][Fonts]]
  - [[#font-facing][Font facing]]
  - [[#icons][Icons]]
  - [[#zoom-inout][Zoom in/out]]
- [[#rainbow-mode][Rainbow mode]]
- [[#gui-tweaks][GUI tweaks]]
- [[#org-mode][Org mode]]
  - [[#table-of-contents-tocs][Table of contents (TOCs)]]
  - [[#bullets-style][Bullets style]]
  - [[#default-org-mode-auto-indent][Default Org Mode auto-indent]]
  - [[#shorthand-for-source-code-blocks][Shorthand for source code blocks]]
- [[#completion-framework][Completion framework]]
  - [[#ivy--counsel-and-ivy-rich][Ivy,  Counsel and Ivy-rich]]
- [[#useful-utilities][Useful "utilities"]]
  - [[#sudo-edit][Sudo edit]]
  - [[#vterm--vterm-toggle][Vterm & Vterm-Toggle]]
- [[#keybindings-discovery][Keybindings discovery]]
  - [[#which-key-tool][Which-key tool]]

* Programs to load first

** Package Manager

As package manager I chose [[https://github.com/progfolio/elpaca][elpaca]], the following code installs it.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

From now on a package can be installed using the `elpaca` macro. Anyway, it could
be useful to install the use-package support.

#+begin_src emacs-lisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified
  (setq elpaca-use-package-by-default t))
#+end_src

** Evil Mode

Emacs keybindings for editing text are not for me. I make use of the
EVIL (Extensible VI Layer) mode and the EVIL collection (in order to
have integration with other Emacs programs too).

TODO: without ensure both weren't installed, and for the evil
collection I'm not using the demand option. See why

#+begin_src emacs-lisp
(use-package evil
    :ensure t
    :demand t
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-symbol-word-search t) ;; Allows to recognise as a whole word those that contain underscores (useful for '*' and '#' use)
    (evil-mode))
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
#+end_src

** Keybindings

The program that handles the keybindings configuration is general.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)

  ;; Set up 'SPC' as the global leader key
  (general-create-definer samu/keybindings
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

  ;; Buffer keybindings
  ;; Note: The :wk stands for "which key" and will be used by
  ;; the homonym tool in order to provide a description
  (samu/keybindings
    "b"  '(:ignore t :wk "buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "List buffers")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer"))

  ;; elisp evaluation keybindings
  (samu/keybindings
    "e"   '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e r" '(eval-region :wk "Evaluate elisp in region")) 
  
  ;; sudo edit keybindings
  (samu/keybindings
    "f s" '(sudo-edit-find-file :wk "Sudo find file")
    "f S" '(sudo-edit :wk "Sudo edit current file"))

  ;; Toggles keybindings 
  (samu/keybindings
    "t"   '(:ignore t :wk "Toggle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))
    
  ;; Helper / Reload config keybindings
  (samu/keybindings
    "h"     '(:ignore t :wk "Help")
    "h f"   '(describe-function :wk "Describe function")
    "h v"   '(describe-variable :wk "Describe variable")
    "h r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
    ;;"h r r" '(reload-init-file :wk "Reload emacs config"))
  
  ;; Just some convenience keybindings
  (samu/keybindings
    "."       '(find-file :wk "Find file")
    "f c"     '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r"     '(counsel-recentf :wk "Find recent files")
    "TAB TAB" '(comment-line :wk "Comment lines"))
)
#+end_src

* Theme

An Emacs theme can be created using the [[https://emacsfodder.github.io/emacs-theme-editor][Emacs Theme Editor]]. Anyway, I'll go with [[https://github.com/rawleyfowler/tokyo-theme.el/blob/main/tokyo-theme.el][this one]] (once downloaded, it needs to be placed under the themes folder).

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
(load-theme 'tokyo t)
#+end_src

* Fonts

** Font facing

Defining and configuring fonts Emacs will use.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

** Icons

Set of icons that can be used with dashboard, dired, ibuffer and other Emacs programs. Note that they are actually used only if Emacs is used via GUI.

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Zoom in/out

Using Ctrl + / Ctrl - to resepectively zoom in / out, moreover the same can be done using the mouse.

Note: I'm commenting out the following lines because I use Emacs via terminal at the moment and they work only for the GUI Emacs.

#+begin_src emacs-lisp
;;(global-set-key (kbd "M-+") 'text-scale-increase)
;;(global-set-key (kbd "M--") 'text-scale-decrease)
;;(global-set-key (kbd "<M-wheel-up>") 'text-scale-increase)
;;(global-set-key (kbd "<M-wheel-down>") 'text-scale-decrease)
#+end_src

* Rainbow mode

Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook ((org-mode prog-mode) . rainbow-mode))
#+end_src

* GUI tweaks

Disable menubar, toolbars and scrollbars.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
;; (scroll-bar-mode -1) ;; Maybe not required depending on the teminal emulator settings
#+end_src

Display line numbers and truncated lines.

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

* Org mode

Org mode configuration.

** Table of contents (TOCs)

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Bullets style

Changing from default bullet style (*) to a more appealing one.

#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Default Org Mode auto-indent

Org mode source blocks present a really annoying auto-indentation behaviour: when adding a new line all the source block get indented. Let's get rid of it.

#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

** Shorthand for source code blocks

Org-tempo is not a separate package, it's  present by default but needs to be enabled. Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag. See the table below for the expansion.

| Typing the below + TAB | Expands to                              |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

* Completion framework

** Ivy,  Counsel and Ivy-rich

[[https://github.com/abo-abo/swiper][Ivy]] is a generic completion mechanism for Emacs, while Counsel is a collection of Ivy-enhanced versions of common Emcas commands. To add descriptions alongside the commands in M-x, Ivy-rich is used.

#+begin_src emacs-lisp
(use-package ivy
  :demand t
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package counsel
  :after ivy
  :config (counsel-mode))

;; Only if emacs is used via GUI
(use-package all-the-icons-ivy-rich
  :if (display-graphic-p)
  :init (all-the-icons-ivy-rich-mode 1)) ;; Icons need to be present

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev))
#+end_src

* Useful "utilities"

** Sudo edit

The sudo-edit package allows to pen files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without them. See keybindings section for the related keybindings.
TODO: link keybindings section. 

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

** Vterm & Vterm-Toggle

Vterm is a terminal emulator within Emacs.  The ‘shell-file-name’ setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm. In this case I'm running the fish shell.

Note: vterm requires cmake and libtool to be installed in MacOS.

#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/opt/homebrew/bin/fish"
      vterm-max-scrollback 5000))
#+end_src

To enable [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]:

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* Keybindings discovery

Keybindings, key combination.. everywhere and everytime. Something to discover / visually see them is absolutely required.

** Which-key tool

Which-key tool to the rescue. It shows up the next possibile keys with the related description to choose from.

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src
