#+TITLE: Dotfiles Automation with Mise
#+AUTHOR: Samuele Paglia
#+DESCRIPTION: Automated tool installation and task management for dotfiles using mise
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#introduction][Introduction]]
- [[#mise-installation][Mise Installation]]
- [[#main-configuration][Main Configuration]]
  - [[#mise-settings][Mise Settings]]
  - [[#environment-variables][Environment Variables]]
  - [[#core-tools][Core Tools]]
  - [[#shell-utilities][Shell Utilities]]
  - [[#terminal-and-multiplexer][Terminal and Multiplexer]]
  - [[#editor-tools][Editor Tools]]
  - [[#window-management][Window Management]]
  - [[#fonts][Fonts]]
  - [[#tasks][Tasks]]

* Introduction

This dotfiles repository uses [[https://mise.jdx.dev/][mise]] (formerly rtx) to automate the installation and management of development tools. Mise is a polyglot tool version manager that can also run tasks and manage environment variables.

All configurations follow a literate programming approach using Emacs Org Mode. The =mise.toml= file in this document will be tangled using =C-c C-v t=.

Mise provides:
- **Tool Installation**: Automated installation of CLI tools and applications
- **Task Running**: Convenient task automation for common operations
- **Environment Management**: Project-specific environment variables
- **Version Management**: Tool version pinning and management

Documentation: https://mise.jdx.dev/

* Mise Installation

Install mise using Homebrew:

#+begin_src shell
brew install mise
#+end_src

Add mise to your shell configuration. For Zsh, add to =~/.zshrc=:

#+begin_src shell
# ~/.zshrc
eval "$(mise activate zsh)"
#+end_src

For Bash, add to =~/.bashrc=:

#+begin_src shell
# ~/.bashrc
eval "$(mise activate bash)"
#+end_src

For Fish, add to =~/.config/fish/config.fish=:

#+begin_src shell
# ~/.config/fish/config.fish
mise activate fish | source
#+end_src

After installation and shell configuration, reload your shell or run:

#+begin_src shell
source ~/.zshrc  # or your shell's config file
#+end_src

* Main Configuration
:PROPERTIES:
:header-args:toml: :tangle mise.toml
:END:

** Mise Settings

Configure mise behavior and settings:

#+begin_src toml
# Mise configuration for dotfiles repository
# Documentation: https://mise.jdx.dev/configuration.html

[settings]
# Automatically install missing tools when entering directory
auto_install = true

# Use verbose output for better debugging
verbose = false

# Experimental features
experimental = true
#+end_src

** Environment Variables

Define environment variables for the dotfiles environment:

#+begin_src toml

[env]
# Dotfiles directory
DOTFILES = "{{config_root}}"

# XDG Base Directory Specification
XDG_CONFIG_HOME = "~/.config"
XDG_DATA_HOME = "~/.local/share"
XDG_CACHE_HOME = "~/.cache"
#+end_src

** Core Tools

Install core development and system tools via Homebrew:

#+begin_src toml

[tools]
# Core system tools
"brew:stow" = "latest"           # Dotfiles symlink manager
"brew:git" = "latest"            # Version control
"brew:git-lfs" = "latest"        # Git Large File Storage

# Mise itself (ensures latest version)
"brew:mise" = "latest"
#+end_src

** Shell Utilities

Modern replacements for traditional Unix tools:

#+begin_src toml

# Modern shell utilities
"brew:eza" = "latest"                    # Modern replacement for 'ls'
"brew:bat" = "latest"                    # Modern replacement for 'cat' with syntax highlighting
"brew:fzf" = "latest"                    # Fuzzy finder
"brew:zoxide" = "latest"                 # Smarter 'cd' command
"brew:ripgrep" = "latest"                # Fast grep alternative
"brew:fd" = "latest"                     # Fast find alternative
"brew:zsh-autosuggestions" = "latest"    # Zsh autosuggestions
"brew:zsh-syntax-highlighting" = "latest" # Zsh syntax highlighting
"brew:atuin" = "latest"                  # Shell history management
#+end_src

** Terminal and Multiplexer

Terminal emulator and multiplexer tools:

#+begin_src toml

# Terminal and multiplexer
"brew:tmux" = "latest"           # Terminal multiplexer
"brew:starship" = "latest"       # Cross-shell prompt
#+end_src

WezTerm is installed as a cask and requires additional configuration (see =wezterm/mise.README.org=):

#+begin_src toml

# WezTerm terminal emulator (includes font dependencies)
"brew:wezterm" = { type = "cask" }
#+end_src

** Editor Tools

Text editors and related tools:

#+begin_src toml

# Editors
"brew:neovim" = "latest"         # Modern Vim-based editor
"brew:emacs" = "latest"          # Extensible text editor
#+end_src

** Window Management

macOS window manager (requires additional setup, see =aerospace/mise.README.org=):

#+begin_src toml

# Window management - AeroSpace tiling window manager
"brew:nikitabobko/tap/aerospace" = "latest"
#+end_src

** Fonts

Fonts required by terminal emulators and editors (see =fonts/README.org=):

#+begin_src toml

# Fonts - JetBrains Mono Nerd Font for terminal and editor use
"brew:font-jetbrains-mono-nerd-font" = { type = "cask" }
#+end_src

** Tasks

Define common tasks for dotfiles management:

#+begin_src toml

[tasks.install]
description = "Install all tools and set up dotfiles"
run = [
    "mise install",
    "mkdir -p $HOME/.config",
    "echo 'All tools installed. Run mise run setup to configure dotfiles.'",
]

[tasks.setup]
description = "Set up dotfiles using stow"
depends = ["install"]
run = [
    "stow --adopt -t ~/.config -v .",
    "echo 'Dotfiles symlinked to ~/.config'",
]

[tasks.setup-tmux]
description = "Install TMUX Plugin Manager"
run = [
    "git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm || echo 'TPM already installed'",
    "echo 'TPM installed. Press prefix + I in tmux to install plugins.'",
]

[tasks.tangle]
description = "Tangle all Org mode configuration files"
run = '''
emacs --batch --eval "(progn \
  (require 'org) \
  (dolist (file '(\"tmux/README.org\" \
                  \"wezterm/README.org\" \
                  \"aerospace/README.org\" \
                  \"starship/README.org\" \
                  \"git/README.org\" \
                  \"nvim/README.org\" \
                  \"emacs/config.org\")) \
    (when (file-exists-p file) \
      (message \"Tangling %s...\" file) \
      (with-current-buffer (find-file-noselect file) \
        (org-babel-tangle) \
        (kill-buffer)))))"
'''

[tasks.update]
description = "Update all tools to latest versions"
run = [
    "mise upgrade",
    "brew upgrade",
    "echo 'All tools updated.'",
]

[tasks.verify]
description = "Verify stow configuration (dry run)"
run = "stow --adopt -t ~/.config -nv ."

[tasks.restow]
description = "Re-stow all configurations"
run = "stow -Rt ~/.config ."

[tasks.clean]
description = "Remove all symlinks created by stow"
run = "stow -Dt ~/.config ."

[tasks.doctor]
description = "Check mise and tool installation status"
run = [
    "mise doctor",
    "mise list",
]
#+end_src

* Usage

** Initial Setup

After cloning the dotfiles repository:

#+begin_src shell
# Install mise
brew install mise

# Activate mise in your shell (add to ~/.zshrc or shell config)
eval "$(mise activate zsh)"

# Navigate to dotfiles directory
cd ~/Documents/repos/dotfiles  # or your dotfiles location

# Install all tools
mise run install

# Set up dotfiles with stow
mise run setup

# Set up TMUX Plugin Manager
mise run setup-tmux
#+end_src

** Common Tasks

#+begin_src shell
# Tangle all Org mode files
mise run tangle

# Verify stow configuration (dry run)
mise run verify

# Re-stow all configurations
mise run restow

# Update all tools
mise run update

# Check installation status
mise run doctor

# Clean up (remove all symlinks)
mise run clean
#+end_src
